// datasource & generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SequenceStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  UNSUBSCRIBED
  BOUNCED
}

enum SendStatus {
  QUEUED
  SCHEDULED
  SENT
  DELIVERED
  FAILED
  BOUNCED
}

enum EventType {
  OPEN
  CLICK
  BOUNCE
  REPLY
}

enum Provider {
  GMAIL
  SES
  MAILGUN
}

// Models
model User {
  id        String       @id @default(cuid())
  email     String       @unique
  name      String?
  image     String?
  passwordHash String?   // for credentials auth
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  memberships Membership[]
  accounts    Account[]
  sessions    Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  memberships   Membership[]
  emailAccounts EmailAccount[]
  leadLists     LeadList[]
  templates     Template[]
  sequences     Sequence[]
  apiKeys       ApiKey[]
  unsubscribeTokens UnsubscribeToken[]
}

model Membership {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        Role
  createdAt   DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
}

model EmailAccount {
  id              String    @id @default(cuid())
  workspaceId     String
  provider        Provider
  fromName        String
  fromEmail       String
  oauthJson       Json?
  dailyCap        Int       @default(150)
  warmupStatus    String?   // placeholder for warmup state
  status          String?   // e.g., active, disabled
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  sends     Send[]

  @@unique([workspaceId, fromEmail])
  @@index([workspaceId, provider])
}

model LeadList {
  id          String     @id @default(cuid())
  workspaceId String
  name        String
  createdAt   DateTime   @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  leads     Lead[]

  @@index([workspaceId])
}

model Lead {
  id         String    @id @default(cuid())
  leadListId String
  email      String
  firstName  String?
  lastName   String?
  company    String?
  title      String?
  custom     Json?
  unsubscribedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  list  LeadList  @relation(fields: [leadListId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]

  @@unique([leadListId, email])
  @@index([leadListId, email])
  @@index([unsubscribedAt])
}

model Template {
  id          String    @id @default(cuid())
  workspaceId String
  name        String
  subject     String
  body        String
  variables   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  steps     SequenceStep[]
  variants  TemplateVariant[]

  @@unique([workspaceId, name])
  @@index([workspaceId])
}

model TemplateVariant {
  id          String   @id @default(cuid())
  templateId  String
  key         String
  subject     String
  body        String
  trafficSplit Int     @default(50)
  createdAt   DateTime @default(now())

  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  sends    Send[]

  @@unique([templateId, key])
  @@index([templateId])
}

model Sequence {
  id          String          @id @default(cuid())
  workspaceId String
  name        String
  status      SequenceStatus  @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  workspace Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  steps     SequenceStep[]
  enrollments Enrollment[]

  @@index([workspaceId])
  @@index([status])
}

model SequenceStep {
  id         String    @id @default(cuid())
  sequenceId String
  order      Int
  waitHours  Int        @default(24)
  templateId String

  sequence Sequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id])

  @@unique([sequenceId, order])
  @@index([sequenceId])
}

model Enrollment {
  id             String            @id @default(cuid())
  sequenceId     String
  leadId         String
  status         EnrollmentStatus  @default(ACTIVE)
  nextStepOrder  Int?
  nextSendAt     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  sequence Sequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  lead     Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  sends    Send[]

  @@unique([sequenceId, leadId])
  @@index([sequenceId, status])
  @@index([leadId])
}

model Send {
  id               String      @id @default(cuid())
  enrollmentId     String
  stepOrder        Int
  emailAccountId   String
  status           SendStatus  @default(QUEUED)
  scheduledAt      DateTime?
  sentAt           DateTime?
  providerMessageId String?    @unique
  error            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  templateVariantId String?

  enrollment   Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  emailAccount EmailAccount @relation(fields: [emailAccountId], references: [id])
  events       Event[]
  templateVariant TemplateVariant? @relation(fields: [templateVariantId], references: [id])

  @@index([status, scheduledAt])
  @@index([emailAccountId])
  @@index([templateVariantId])
}

model Event {
  id        String    @id @default(cuid())
  sendId    String
  type      EventType
  meta      Json?
  createdAt DateTime  @default(now())

  send Send @relation(fields: [sendId], references: [id], onDelete: Cascade)

  @@index([sendId, type])
}

model UnsubscribeToken {
  id          String   @id @default(cuid())
  workspaceId String
  leadEmail   String
  token       String   @unique
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, leadEmail])
}

model ApiKey {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  keyHash     String   @unique
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
} 